{"$message_type":"diagnostic","message":"this item cannot be used as its where bounds are not satisfied for the `Self` type","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs","byte_start":43137,"byte_end":43219,"line_start":967,"line_end":969,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    fn only_derive_is_allowed_to_implement_this_trait()","highlight_start":5,"highlight_end":56},{"text":"    where","highlight_start":1,"highlight_end":10},{"text":"        Self: Sized,","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this item cannot be used as its where bounds are not satisfied for the `Self` type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs:967:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m967\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn only_derive_is_allowed_to_implement_this_trait()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m968\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m969\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: Sized,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|____________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this item cannot be used as its where bounds are not satisfied for the `Self` type","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":16992,"byte_end":17043,"line_start":380,"line_end":380,"column_start":17,"column_end":68,"is_primary":true,"text":[{"text":"                fn only_derive_is_allowed_to_implement_this_trait() {}","highlight_start":17,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":1158,"byte_end":1170,"line_start":31,"line_end":31,"column_start":40,"column_end":52,"is_primary":false,"text":[{"text":"        const _: () = { $($(#[$attr])* $macro!$args;)* };","highlight_start":40,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs","byte_start":44286,"byte_end":45107,"line_start":1003,"line_end":1021,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safety_comment! {","highlight_start":1,"highlight_end":18},{"text":"    /// SAFETY:","highlight_start":1,"highlight_end":16},{"text":"    /// `str` and `ManuallyDrop<[T]>` [1] have the same representations as","highlight_start":1,"highlight_end":75},{"text":"    /// `[u8]` and `[T]` repsectively. `str` has different bit validity than","highlight_start":1,"highlight_end":77},{"text":"    /// `[u8]`, but that doesn't affect the soundness of this impl.","highlight_start":1,"highlight_end":68},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [1] Per https://doc.rust-lang.org/nightly/core/mem/struct.ManuallyDrop.html:","highlight_start":1,"highlight_end":85},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   `ManuallyDrop<T>` is guaranteed to have the same layout and bit","highlight_start":1,"highlight_end":74},{"text":"    ///   validity as `T`","highlight_start":1,"highlight_end":26},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// TODO(#429):","highlight_start":1,"highlight_end":20},{"text":"    /// -  Add quotes from docs.","highlight_start":1,"highlight_end":33},{"text":"    /// -  Once [1] (added in","highlight_start":1,"highlight_end":30},{"text":"    /// https://github.com/rust-lang/rust/pull/115522) is available on stable,","highlight_start":1,"highlight_end":79},{"text":"    /// quote the stable docs instead of the nightly docs.","highlight_start":1,"highlight_end":59},{"text":"    unsafe_impl_known_layout!(#[repr([u8])] str);","highlight_start":1,"highlight_end":50},{"text":"    unsafe_impl_known_layout!(T: ?Sized + KnownLayout => #[repr(T)] ManuallyDrop<T>);","highlight_start":1,"highlight_end":86},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safety_comment!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":940,"byte_end":967,"line_start":28,"line_end":28,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! safety_comment {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl_known_layout!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":16652,"byte_end":16689,"line_start":373,"line_end":373,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl_known_layout {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this item cannot be used as its where bounds are not satisfied for the `Self` type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs:380:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m380\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                fn only_derive_is_allowed_to_implement_this_trait() {}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs:1003:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1003\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafety_comment! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1004\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// SAFETY:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1005\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// `str` and `ManuallyDrop<[T]>` [1] have the same representations as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1006\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// `[u8]` and `[T]` repsectively. `str` has different bit validity than\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1020\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe_impl_known_layout!(T: ?Sized + KnownLayout => #[repr(T)] ManuallyDrop<T>);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1021\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `unsafe_impl_known_layout` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this item cannot be used as its where bounds are not satisfied for the `Self` type","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":8183,"byte_end":8234,"line_start":180,"line_end":180,"column_start":9,"column_end":60,"is_primary":true,"text":[{"text":"        fn only_derive_is_allowed_to_implement_this_trait() {}","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2684,"byte_end":2753,"line_start":64,"line_end":64,"column_start":13,"column_end":82,"is_primary":false,"text":[{"text":"            unsafe_impl!(@method $trait $(; |$candidate: &$repr| $is_bit_valid)?);","highlight_start":13,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2878,"byte_end":2904,"line_start":69,"line_end":69,"column_start":12,"column_end":38,"is_primary":false,"text":[{"text":"        $( unsafe_impl!($ty: $traits); )*","highlight_start":12,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":1158,"byte_end":1170,"line_start":31,"line_end":31,"column_start":40,"column_end":52,"is_primary":false,"text":[{"text":"        const _: () = { $($(#[$attr])* $macro!$args;)* };","highlight_start":40,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs","byte_start":126743,"byte_end":128938,"line_start":3192,"line_end":3232,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safety_comment! {","highlight_start":1,"highlight_end":18},{"text":"    /// SAFETY:","highlight_start":1,"highlight_end":16},{"text":"    /// - `FromZeroes`, `AsBytes`, `Unaligned`: Per the reference [1], `str`","highlight_start":1,"highlight_end":77},{"text":"    ///   has the same layout as `[u8]`, and `[u8]` is `FromZeroes`, `AsBytes`,","highlight_start":1,"highlight_end":80},{"text":"    ///   and `Unaligned`.","highlight_start":1,"highlight_end":27},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Note that we don't `assert_unaligned!(str)` because `assert_unaligned!`","highlight_start":1,"highlight_end":80},{"text":"    /// uses `align_of`, which only works for `Sized` types.","highlight_start":1,"highlight_end":61},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// TODO(#429): Add quotes from documentation.","highlight_start":1,"highlight_end":51},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [1] https://doc.rust-lang.org/reference/type-layout.html#str-layout","highlight_start":1,"highlight_end":76},{"text":"    unsafe_impl!(str: FromZeroes, AsBytes, Unaligned);","highlight_start":1,"highlight_end":55},{"text":"    /// SAFETY:","highlight_start":1,"highlight_end":16},{"text":"    /// - The safety requirements for `unsafe_impl!` with an `is_bit_valid`","highlight_start":1,"highlight_end":76},{"text":"    ///   closure:","highlight_start":1,"highlight_end":19},{"text":"    ///   - Given `t: *mut str` and `let r = *mut [u8]`, `r` refers to an object","highlight_start":1,"highlight_end":81},{"text":"    ///     of the same size as that referred to by `t`. This is true because","highlight_start":1,"highlight_end":78},{"text":"    ///     `str` and `[u8]` have the same representation. [1]","highlight_start":1,"highlight_end":63},{"text":"    ///   - Since the closure takes a `&[u8]` argument, given a `Ptr<'a, str>`","highlight_start":1,"highlight_end":79},{"text":"    ///     which satisfies the preconditions of","highlight_start":1,"highlight_end":49},{"text":"    ///     `TryFromBytes::<str>::is_bit_valid`, it must be guaranteed that the","highlight_start":1,"highlight_end":80},{"text":"    ///     memory referenced by that `Ptr` always contains a valid `[u8]`.","highlight_start":1,"highlight_end":76},{"text":"    ///     Since `str`'s bytes are always initialized [1], `is_bit_valid`'s","highlight_start":1,"highlight_end":77},{"text":"    ///     precondition requires that the same is true of its argument. Since","highlight_start":1,"highlight_end":79},{"text":"    ///     `[u8]`'s only bit validity invariant is that its bytes must be","highlight_start":1,"highlight_end":75},{"text":"    ///     initialized, this memory is guaranteed to contain a valid `[u8]`.","highlight_start":1,"highlight_end":78},{"text":"    ///   - The alignment of `str` is equal to the alignment of `[u8]`. [1]","highlight_start":1,"highlight_end":76},{"text":"    ///   - The impl must only return `true` for its argument if the original","highlight_start":1,"highlight_end":78},{"text":"    ///     `Ptr<str>` refers to a valid `str`. `str::from_utf8` guarantees that","highlight_start":1,"highlight_end":81},{"text":"    ///     it returns `Err` if its input is not a valid `str`. [2]","highlight_start":1,"highlight_end":68},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [1] Per https://doc.rust-lang.org/reference/types/textual.html:","highlight_start":1,"highlight_end":72},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   A value of type `str` is represented the same was as `[u8]`.","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [2] Per https://doc.rust-lang.org/core/str/fn.from_utf8.html#errors:","highlight_start":1,"highlight_end":77},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   Returns `Err` if the slice is not UTF-8.","highlight_start":1,"highlight_end":51},{"text":"    unsafe_impl!(str: TryFromBytes; |candidate: &[u8]| core::str::from_utf8(candidate).is_ok());","highlight_start":1,"highlight_end":97},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safety_comment!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":940,"byte_end":967,"line_start":28,"line_end":28,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! safety_comment {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this item cannot be used as its where bounds are not satisfied for the `Self` type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs:180:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m180\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        fn only_derive_is_allowed_to_implement_this_trait() {}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs:3192:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafety_comment! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// SAFETY:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// - `FromZeroes`, `AsBytes`, `Unaligned`: Per the reference [1], `str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///   has the same layout as `[u8]`, and `[u8]` is `FromZeroes`, `AsBytes`,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe_impl!(str: TryFromBytes; |candidate: &[u8]| core::str::from_utf8(candidate).is_ok());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `unsafe_impl` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this item cannot be used as its where bounds are not satisfied for the `Self` type","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":8183,"byte_end":8234,"line_start":180,"line_end":180,"column_start":9,"column_end":60,"is_primary":true,"text":[{"text":"        fn only_derive_is_allowed_to_implement_this_trait() {}","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2684,"byte_end":2753,"line_start":64,"line_end":64,"column_start":13,"column_end":82,"is_primary":false,"text":[{"text":"            unsafe_impl!(@method $trait $(; |$candidate: &$repr| $is_bit_valid)?);","highlight_start":13,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2878,"byte_end":2904,"line_start":69,"line_end":69,"column_start":12,"column_end":38,"is_primary":false,"text":[{"text":"        $( unsafe_impl!($ty: $traits); )*","highlight_start":12,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":1158,"byte_end":1170,"line_start":31,"line_end":31,"column_start":40,"column_end":52,"is_primary":false,"text":[{"text":"        const _: () = { $($(#[$attr])* $macro!$args;)* };","highlight_start":40,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs","byte_start":126743,"byte_end":128938,"line_start":3192,"line_end":3232,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safety_comment! {","highlight_start":1,"highlight_end":18},{"text":"    /// SAFETY:","highlight_start":1,"highlight_end":16},{"text":"    /// - `FromZeroes`, `AsBytes`, `Unaligned`: Per the reference [1], `str`","highlight_start":1,"highlight_end":77},{"text":"    ///   has the same layout as `[u8]`, and `[u8]` is `FromZeroes`, `AsBytes`,","highlight_start":1,"highlight_end":80},{"text":"    ///   and `Unaligned`.","highlight_start":1,"highlight_end":27},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Note that we don't `assert_unaligned!(str)` because `assert_unaligned!`","highlight_start":1,"highlight_end":80},{"text":"    /// uses `align_of`, which only works for `Sized` types.","highlight_start":1,"highlight_end":61},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// TODO(#429): Add quotes from documentation.","highlight_start":1,"highlight_end":51},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [1] https://doc.rust-lang.org/reference/type-layout.html#str-layout","highlight_start":1,"highlight_end":76},{"text":"    unsafe_impl!(str: FromZeroes, AsBytes, Unaligned);","highlight_start":1,"highlight_end":55},{"text":"    /// SAFETY:","highlight_start":1,"highlight_end":16},{"text":"    /// - The safety requirements for `unsafe_impl!` with an `is_bit_valid`","highlight_start":1,"highlight_end":76},{"text":"    ///   closure:","highlight_start":1,"highlight_end":19},{"text":"    ///   - Given `t: *mut str` and `let r = *mut [u8]`, `r` refers to an object","highlight_start":1,"highlight_end":81},{"text":"    ///     of the same size as that referred to by `t`. This is true because","highlight_start":1,"highlight_end":78},{"text":"    ///     `str` and `[u8]` have the same representation. [1]","highlight_start":1,"highlight_end":63},{"text":"    ///   - Since the closure takes a `&[u8]` argument, given a `Ptr<'a, str>`","highlight_start":1,"highlight_end":79},{"text":"    ///     which satisfies the preconditions of","highlight_start":1,"highlight_end":49},{"text":"    ///     `TryFromBytes::<str>::is_bit_valid`, it must be guaranteed that the","highlight_start":1,"highlight_end":80},{"text":"    ///     memory referenced by that `Ptr` always contains a valid `[u8]`.","highlight_start":1,"highlight_end":76},{"text":"    ///     Since `str`'s bytes are always initialized [1], `is_bit_valid`'s","highlight_start":1,"highlight_end":77},{"text":"    ///     precondition requires that the same is true of its argument. Since","highlight_start":1,"highlight_end":79},{"text":"    ///     `[u8]`'s only bit validity invariant is that its bytes must be","highlight_start":1,"highlight_end":75},{"text":"    ///     initialized, this memory is guaranteed to contain a valid `[u8]`.","highlight_start":1,"highlight_end":78},{"text":"    ///   - The alignment of `str` is equal to the alignment of `[u8]`. [1]","highlight_start":1,"highlight_end":76},{"text":"    ///   - The impl must only return `true` for its argument if the original","highlight_start":1,"highlight_end":78},{"text":"    ///     `Ptr<str>` refers to a valid `str`. `str::from_utf8` guarantees that","highlight_start":1,"highlight_end":81},{"text":"    ///     it returns `Err` if its input is not a valid `str`. [2]","highlight_start":1,"highlight_end":68},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [1] Per https://doc.rust-lang.org/reference/types/textual.html:","highlight_start":1,"highlight_end":72},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   A value of type `str` is represented the same was as `[u8]`.","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [2] Per https://doc.rust-lang.org/core/str/fn.from_utf8.html#errors:","highlight_start":1,"highlight_end":77},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   Returns `Err` if the slice is not UTF-8.","highlight_start":1,"highlight_end":51},{"text":"    unsafe_impl!(str: TryFromBytes; |candidate: &[u8]| core::str::from_utf8(candidate).is_ok());","highlight_start":1,"highlight_end":97},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safety_comment!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":940,"byte_end":967,"line_start":28,"line_end":28,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! safety_comment {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this item cannot be used as its where bounds are not satisfied for the `Self` type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs:180:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m180\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        fn only_derive_is_allowed_to_implement_this_trait() {}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs:3192:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafety_comment! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// SAFETY:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// - `FromZeroes`, `AsBytes`, `Unaligned`: Per the reference [1], `str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///   has the same layout as `[u8]`, and `[u8]` is `FromZeroes`, `AsBytes`,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe_impl!(str: TryFromBytes; |candidate: &[u8]| core::str::from_utf8(candidate).is_ok());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `unsafe_impl` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this item cannot be used as its where bounds are not satisfied for the `Self` type","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":8183,"byte_end":8234,"line_start":180,"line_end":180,"column_start":9,"column_end":60,"is_primary":true,"text":[{"text":"        fn only_derive_is_allowed_to_implement_this_trait() {}","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2684,"byte_end":2753,"line_start":64,"line_end":64,"column_start":13,"column_end":82,"is_primary":false,"text":[{"text":"            unsafe_impl!(@method $trait $(; |$candidate: &$repr| $is_bit_valid)?);","highlight_start":13,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2878,"byte_end":2904,"line_start":69,"line_end":69,"column_start":12,"column_end":38,"is_primary":false,"text":[{"text":"        $( unsafe_impl!($ty: $traits); )*","highlight_start":12,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":1158,"byte_end":1170,"line_start":31,"line_end":31,"column_start":40,"column_end":52,"is_primary":false,"text":[{"text":"        const _: () = { $($(#[$attr])* $macro!$args;)* };","highlight_start":40,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs","byte_start":126743,"byte_end":128938,"line_start":3192,"line_end":3232,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safety_comment! {","highlight_start":1,"highlight_end":18},{"text":"    /// SAFETY:","highlight_start":1,"highlight_end":16},{"text":"    /// - `FromZeroes`, `AsBytes`, `Unaligned`: Per the reference [1], `str`","highlight_start":1,"highlight_end":77},{"text":"    ///   has the same layout as `[u8]`, and `[u8]` is `FromZeroes`, `AsBytes`,","highlight_start":1,"highlight_end":80},{"text":"    ///   and `Unaligned`.","highlight_start":1,"highlight_end":27},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Note that we don't `assert_unaligned!(str)` because `assert_unaligned!`","highlight_start":1,"highlight_end":80},{"text":"    /// uses `align_of`, which only works for `Sized` types.","highlight_start":1,"highlight_end":61},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// TODO(#429): Add quotes from documentation.","highlight_start":1,"highlight_end":51},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [1] https://doc.rust-lang.org/reference/type-layout.html#str-layout","highlight_start":1,"highlight_end":76},{"text":"    unsafe_impl!(str: FromZeroes, AsBytes, Unaligned);","highlight_start":1,"highlight_end":55},{"text":"    /// SAFETY:","highlight_start":1,"highlight_end":16},{"text":"    /// - The safety requirements for `unsafe_impl!` with an `is_bit_valid`","highlight_start":1,"highlight_end":76},{"text":"    ///   closure:","highlight_start":1,"highlight_end":19},{"text":"    ///   - Given `t: *mut str` and `let r = *mut [u8]`, `r` refers to an object","highlight_start":1,"highlight_end":81},{"text":"    ///     of the same size as that referred to by `t`. This is true because","highlight_start":1,"highlight_end":78},{"text":"    ///     `str` and `[u8]` have the same representation. [1]","highlight_start":1,"highlight_end":63},{"text":"    ///   - Since the closure takes a `&[u8]` argument, given a `Ptr<'a, str>`","highlight_start":1,"highlight_end":79},{"text":"    ///     which satisfies the preconditions of","highlight_start":1,"highlight_end":49},{"text":"    ///     `TryFromBytes::<str>::is_bit_valid`, it must be guaranteed that the","highlight_start":1,"highlight_end":80},{"text":"    ///     memory referenced by that `Ptr` always contains a valid `[u8]`.","highlight_start":1,"highlight_end":76},{"text":"    ///     Since `str`'s bytes are always initialized [1], `is_bit_valid`'s","highlight_start":1,"highlight_end":77},{"text":"    ///     precondition requires that the same is true of its argument. Since","highlight_start":1,"highlight_end":79},{"text":"    ///     `[u8]`'s only bit validity invariant is that its bytes must be","highlight_start":1,"highlight_end":75},{"text":"    ///     initialized, this memory is guaranteed to contain a valid `[u8]`.","highlight_start":1,"highlight_end":78},{"text":"    ///   - The alignment of `str` is equal to the alignment of `[u8]`. [1]","highlight_start":1,"highlight_end":76},{"text":"    ///   - The impl must only return `true` for its argument if the original","highlight_start":1,"highlight_end":78},{"text":"    ///     `Ptr<str>` refers to a valid `str`. `str::from_utf8` guarantees that","highlight_start":1,"highlight_end":81},{"text":"    ///     it returns `Err` if its input is not a valid `str`. [2]","highlight_start":1,"highlight_end":68},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [1] Per https://doc.rust-lang.org/reference/types/textual.html:","highlight_start":1,"highlight_end":72},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   A value of type `str` is represented the same was as `[u8]`.","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [2] Per https://doc.rust-lang.org/core/str/fn.from_utf8.html#errors:","highlight_start":1,"highlight_end":77},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   Returns `Err` if the slice is not UTF-8.","highlight_start":1,"highlight_end":51},{"text":"    unsafe_impl!(str: TryFromBytes; |candidate: &[u8]| core::str::from_utf8(candidate).is_ok());","highlight_start":1,"highlight_end":97},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safety_comment!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":940,"byte_end":967,"line_start":28,"line_end":28,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! safety_comment {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this item cannot be used as its where bounds are not satisfied for the `Self` type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs:180:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m180\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        fn only_derive_is_allowed_to_implement_this_trait() {}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs:3192:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafety_comment! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// SAFETY:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// - `FromZeroes`, `AsBytes`, `Unaligned`: Per the reference [1], `str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///   has the same layout as `[u8]`, and `[u8]` is `FromZeroes`, `AsBytes`,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe_impl!(str: TryFromBytes; |candidate: &[u8]| core::str::from_utf8(candidate).is_ok());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `unsafe_impl` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this item cannot be used as its where bounds are not satisfied for the `Self` type","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":8183,"byte_end":8234,"line_start":180,"line_end":180,"column_start":9,"column_end":60,"is_primary":true,"text":[{"text":"        fn only_derive_is_allowed_to_implement_this_trait() {}","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":5565,"byte_end":5661,"line_start":131,"line_end":131,"column_start":13,"column_end":109,"is_primary":false,"text":[{"text":"            unsafe_impl!(@method $trait $(; |$candidate: $(&$ref_repr)? $(Ptr<$ptr_repr>)?| $is_bit_valid)?);","highlight_start":13,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":4860,"byte_end":5091,"line_start":115,"line_end":120,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        unsafe_impl!(","highlight_start":9,"highlight_end":22},{"text":"            @inner","highlight_start":1,"highlight_end":19},{"text":"            $(#[$attr])*","highlight_start":1,"highlight_end":25},{"text":"            $($tyvar $(: $(? $optbound +)* + $($bound +)*)?,)*","highlight_start":1,"highlight_end":63},{"text":"            => $trait for $ty $(; |$candidate $(: &$ref_repr)? $(: Ptr<$ptr_repr>)?| $is_bit_valid)?","highlight_start":1,"highlight_end":101},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":1158,"byte_end":1170,"line_start":31,"line_end":31,"column_start":40,"column_end":52,"is_primary":false,"text":[{"text":"        const _: () = { $($(#[$attr])* $macro!$args;)* };","highlight_start":40,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs","byte_start":145423,"byte_end":149092,"line_start":3527,"line_end":3595,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safety_comment! {","highlight_start":1,"highlight_end":18},{"text":"    /// SAFETY:","highlight_start":1,"highlight_end":16},{"text":"    /// Per the reference [1]:","highlight_start":1,"highlight_end":31},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   An array of `[T; N]` has a size of `size_of::<T>() * N` and the same","highlight_start":1,"highlight_end":79},{"text":"    ///   alignment of `T`. Arrays are laid out so that the zero-based `nth`","highlight_start":1,"highlight_end":77},{"text":"    ///   element of the array is offset from the start of the array by `n *","highlight_start":1,"highlight_end":77},{"text":"    ///   size_of::<T>()` bytes.","highlight_start":1,"highlight_end":33},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   ...","highlight_start":1,"highlight_end":14},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   Slices have the same layout as the section of the array they slice.","highlight_start":1,"highlight_end":78},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// In other words, the layout of a `[T]` or `[T; N]` is a sequence of `T`s","highlight_start":1,"highlight_end":80},{"text":"    /// laid out back-to-back with no bytes in between. Therefore, `[T]` or `[T;","highlight_start":1,"highlight_end":81},{"text":"    /// N]` are `TryFromBytes`, `FromZeroes`, `FromBytes`, and `AsBytes` if `T`","highlight_start":1,"highlight_end":80},{"text":"    /// is (respectively). Furthermore, since an array/slice has \"the same","highlight_start":1,"highlight_end":75},{"text":"    /// alignment of `T`\", `[T]` and `[T; N]` are `Unaligned` if `T` is.","highlight_start":1,"highlight_end":73},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Note that we don't `assert_unaligned!` for slice types because","highlight_start":1,"highlight_end":71},{"text":"    /// `assert_unaligned!` uses `align_of`, which only works for `Sized` types.","highlight_start":1,"highlight_end":81},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [1] https://doc.rust-lang.org/reference/type-layout.html#array-layout","highlight_start":1,"highlight_end":78},{"text":"    unsafe_impl!(const N: usize, T: FromZeroes => FromZeroes for [T; N]);","highlight_start":1,"highlight_end":74},{"text":"    unsafe_impl!(const N: usize, T: FromBytes => FromBytes for [T; N]);","highlight_start":1,"highlight_end":72},{"text":"    unsafe_impl!(const N: usize, T: AsBytes => AsBytes for [T; N]);","highlight_start":1,"highlight_end":68},{"text":"    unsafe_impl!(const N: usize, T: Unaligned => Unaligned for [T; N]);","highlight_start":1,"highlight_end":72},{"text":"    assert_unaligned!([(); 0], [(); 1], [u8; 0], [u8; 1]);","highlight_start":1,"highlight_end":59},{"text":"    unsafe_impl!(T: TryFromBytes => TryFromBytes for [T]; |c: Ptr<[T]>| {","highlight_start":1,"highlight_end":74},{"text":"        // SAFETY: Assuming the preconditions of `is_bit_valid` are satisfied,","highlight_start":1,"highlight_end":79},{"text":"        // so too will the postcondition: that, if `is_bit_valid(candidate)`","highlight_start":1,"highlight_end":77},{"text":"        // returns true, `*candidate` contains a valid `Self`. Per the reference","highlight_start":1,"highlight_end":81},{"text":"        // [1]:","highlight_start":1,"highlight_end":16},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   An array of `[T; N]` has a size of `size_of::<T>() * N` and the","highlight_start":1,"highlight_end":77},{"text":"        //   same alignment of `T`. Arrays are laid out so that the zero-based","highlight_start":1,"highlight_end":79},{"text":"        //   `nth` element of the array is offset from the start of the array by","highlight_start":1,"highlight_end":81},{"text":"        //   `n * size_of::<T>()` bytes.","highlight_start":1,"highlight_end":41},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   ...","highlight_start":1,"highlight_end":17},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   Slices have the same layout as the section of the array they slice.","highlight_start":1,"highlight_end":81},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // In other words, the layout of a `[T] is a sequence of `T`s laid out","highlight_start":1,"highlight_end":79},{"text":"        // back-to-back with no bytes in between. If all elements in `candidate`","highlight_start":1,"highlight_end":81},{"text":"        // are `is_bit_valid`, so too is `candidate`.","highlight_start":1,"highlight_end":54},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Note that any of the below calls may panic, but it would still be","highlight_start":1,"highlight_end":77},{"text":"        // sound even if it did. `is_bit_valid` does not promise that it will","highlight_start":1,"highlight_end":78},{"text":"        // not panic (in fact, it explicitly warns that it's a possibility), and","highlight_start":1,"highlight_end":81},{"text":"        // we have not violated any safety invariants that we must fix before","highlight_start":1,"highlight_end":78},{"text":"        // returning.","highlight_start":1,"highlight_end":22},{"text":"        c.iter().all(|elem|","highlight_start":1,"highlight_end":28},{"text":"            // SAFETY: We uphold the safety contract of `is_bit_valid(elem)`, by","highlight_start":1,"highlight_end":81},{"text":"            // precondition on the surrounding call to `is_bit_valid`. The","highlight_start":1,"highlight_end":75},{"text":"            // memory referenced by `elem` is contained entirely within `c`, and","highlight_start":1,"highlight_end":81},{"text":"            // satisfies the preconditions satisfied by `c`. By axiom, we assume","highlight_start":1,"highlight_end":81},{"text":"            // that `Iterator:all` does not invalidate these preconditions","highlight_start":1,"highlight_end":75},{"text":"            // (e.g., by writing to `elem`.) Since `elem` is derived from `c`,","highlight_start":1,"highlight_end":79},{"text":"            // it is only possible for uninitialized bytes to occur in `elem` at","highlight_start":1,"highlight_end":81},{"text":"            // the same bytes they occur within `c`.","highlight_start":1,"highlight_end":53},{"text":"            unsafe { <T as TryFromBytes>::is_bit_valid(elem) }","highlight_start":1,"highlight_end":63},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    unsafe_impl!(T: FromZeroes => FromZeroes for [T]);","highlight_start":1,"highlight_end":55},{"text":"    unsafe_impl!(T: FromBytes => FromBytes for [T]);","highlight_start":1,"highlight_end":53},{"text":"    unsafe_impl!(T: AsBytes => AsBytes for [T]);","highlight_start":1,"highlight_end":49},{"text":"    unsafe_impl!(T: Unaligned => Unaligned for [T]);","highlight_start":1,"highlight_end":53},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safety_comment!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":940,"byte_end":967,"line_start":28,"line_end":28,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! safety_comment {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this item cannot be used as its where bounds are not satisfied for the `Self` type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs:180:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m180\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        fn only_derive_is_allowed_to_implement_this_trait() {}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs:3527:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafety_comment! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// SAFETY:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Per the reference [1]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe_impl!(T: Unaligned => Unaligned for [T]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `unsafe_impl` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this item cannot be used as its where bounds are not satisfied for the `Self` type","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":8183,"byte_end":8234,"line_start":180,"line_end":180,"column_start":9,"column_end":60,"is_primary":true,"text":[{"text":"        fn only_derive_is_allowed_to_implement_this_trait() {}","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":5565,"byte_end":5661,"line_start":131,"line_end":131,"column_start":13,"column_end":109,"is_primary":false,"text":[{"text":"            unsafe_impl!(@method $trait $(; |$candidate: $(&$ref_repr)? $(Ptr<$ptr_repr>)?| $is_bit_valid)?);","highlight_start":13,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":4860,"byte_end":5091,"line_start":115,"line_end":120,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        unsafe_impl!(","highlight_start":9,"highlight_end":22},{"text":"            @inner","highlight_start":1,"highlight_end":19},{"text":"            $(#[$attr])*","highlight_start":1,"highlight_end":25},{"text":"            $($tyvar $(: $(? $optbound +)* + $($bound +)*)?,)*","highlight_start":1,"highlight_end":63},{"text":"            => $trait for $ty $(; |$candidate $(: &$ref_repr)? $(: Ptr<$ptr_repr>)?| $is_bit_valid)?","highlight_start":1,"highlight_end":101},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":1158,"byte_end":1170,"line_start":31,"line_end":31,"column_start":40,"column_end":52,"is_primary":false,"text":[{"text":"        const _: () = { $($(#[$attr])* $macro!$args;)* };","highlight_start":40,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs","byte_start":145423,"byte_end":149092,"line_start":3527,"line_end":3595,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safety_comment! {","highlight_start":1,"highlight_end":18},{"text":"    /// SAFETY:","highlight_start":1,"highlight_end":16},{"text":"    /// Per the reference [1]:","highlight_start":1,"highlight_end":31},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   An array of `[T; N]` has a size of `size_of::<T>() * N` and the same","highlight_start":1,"highlight_end":79},{"text":"    ///   alignment of `T`. Arrays are laid out so that the zero-based `nth`","highlight_start":1,"highlight_end":77},{"text":"    ///   element of the array is offset from the start of the array by `n *","highlight_start":1,"highlight_end":77},{"text":"    ///   size_of::<T>()` bytes.","highlight_start":1,"highlight_end":33},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   ...","highlight_start":1,"highlight_end":14},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   Slices have the same layout as the section of the array they slice.","highlight_start":1,"highlight_end":78},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// In other words, the layout of a `[T]` or `[T; N]` is a sequence of `T`s","highlight_start":1,"highlight_end":80},{"text":"    /// laid out back-to-back with no bytes in between. Therefore, `[T]` or `[T;","highlight_start":1,"highlight_end":81},{"text":"    /// N]` are `TryFromBytes`, `FromZeroes`, `FromBytes`, and `AsBytes` if `T`","highlight_start":1,"highlight_end":80},{"text":"    /// is (respectively). Furthermore, since an array/slice has \"the same","highlight_start":1,"highlight_end":75},{"text":"    /// alignment of `T`\", `[T]` and `[T; N]` are `Unaligned` if `T` is.","highlight_start":1,"highlight_end":73},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Note that we don't `assert_unaligned!` for slice types because","highlight_start":1,"highlight_end":71},{"text":"    /// `assert_unaligned!` uses `align_of`, which only works for `Sized` types.","highlight_start":1,"highlight_end":81},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [1] https://doc.rust-lang.org/reference/type-layout.html#array-layout","highlight_start":1,"highlight_end":78},{"text":"    unsafe_impl!(const N: usize, T: FromZeroes => FromZeroes for [T; N]);","highlight_start":1,"highlight_end":74},{"text":"    unsafe_impl!(const N: usize, T: FromBytes => FromBytes for [T; N]);","highlight_start":1,"highlight_end":72},{"text":"    unsafe_impl!(const N: usize, T: AsBytes => AsBytes for [T; N]);","highlight_start":1,"highlight_end":68},{"text":"    unsafe_impl!(const N: usize, T: Unaligned => Unaligned for [T; N]);","highlight_start":1,"highlight_end":72},{"text":"    assert_unaligned!([(); 0], [(); 1], [u8; 0], [u8; 1]);","highlight_start":1,"highlight_end":59},{"text":"    unsafe_impl!(T: TryFromBytes => TryFromBytes for [T]; |c: Ptr<[T]>| {","highlight_start":1,"highlight_end":74},{"text":"        // SAFETY: Assuming the preconditions of `is_bit_valid` are satisfied,","highlight_start":1,"highlight_end":79},{"text":"        // so too will the postcondition: that, if `is_bit_valid(candidate)`","highlight_start":1,"highlight_end":77},{"text":"        // returns true, `*candidate` contains a valid `Self`. Per the reference","highlight_start":1,"highlight_end":81},{"text":"        // [1]:","highlight_start":1,"highlight_end":16},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   An array of `[T; N]` has a size of `size_of::<T>() * N` and the","highlight_start":1,"highlight_end":77},{"text":"        //   same alignment of `T`. Arrays are laid out so that the zero-based","highlight_start":1,"highlight_end":79},{"text":"        //   `nth` element of the array is offset from the start of the array by","highlight_start":1,"highlight_end":81},{"text":"        //   `n * size_of::<T>()` bytes.","highlight_start":1,"highlight_end":41},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   ...","highlight_start":1,"highlight_end":17},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   Slices have the same layout as the section of the array they slice.","highlight_start":1,"highlight_end":81},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // In other words, the layout of a `[T] is a sequence of `T`s laid out","highlight_start":1,"highlight_end":79},{"text":"        // back-to-back with no bytes in between. If all elements in `candidate`","highlight_start":1,"highlight_end":81},{"text":"        // are `is_bit_valid`, so too is `candidate`.","highlight_start":1,"highlight_end":54},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Note that any of the below calls may panic, but it would still be","highlight_start":1,"highlight_end":77},{"text":"        // sound even if it did. `is_bit_valid` does not promise that it will","highlight_start":1,"highlight_end":78},{"text":"        // not panic (in fact, it explicitly warns that it's a possibility), and","highlight_start":1,"highlight_end":81},{"text":"        // we have not violated any safety invariants that we must fix before","highlight_start":1,"highlight_end":78},{"text":"        // returning.","highlight_start":1,"highlight_end":22},{"text":"        c.iter().all(|elem|","highlight_start":1,"highlight_end":28},{"text":"            // SAFETY: We uphold the safety contract of `is_bit_valid(elem)`, by","highlight_start":1,"highlight_end":81},{"text":"            // precondition on the surrounding call to `is_bit_valid`. The","highlight_start":1,"highlight_end":75},{"text":"            // memory referenced by `elem` is contained entirely within `c`, and","highlight_start":1,"highlight_end":81},{"text":"            // satisfies the preconditions satisfied by `c`. By axiom, we assume","highlight_start":1,"highlight_end":81},{"text":"            // that `Iterator:all` does not invalidate these preconditions","highlight_start":1,"highlight_end":75},{"text":"            // (e.g., by writing to `elem`.) Since `elem` is derived from `c`,","highlight_start":1,"highlight_end":79},{"text":"            // it is only possible for uninitialized bytes to occur in `elem` at","highlight_start":1,"highlight_end":81},{"text":"            // the same bytes they occur within `c`.","highlight_start":1,"highlight_end":53},{"text":"            unsafe { <T as TryFromBytes>::is_bit_valid(elem) }","highlight_start":1,"highlight_end":63},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    unsafe_impl!(T: FromZeroes => FromZeroes for [T]);","highlight_start":1,"highlight_end":55},{"text":"    unsafe_impl!(T: FromBytes => FromBytes for [T]);","highlight_start":1,"highlight_end":53},{"text":"    unsafe_impl!(T: AsBytes => AsBytes for [T]);","highlight_start":1,"highlight_end":49},{"text":"    unsafe_impl!(T: Unaligned => Unaligned for [T]);","highlight_start":1,"highlight_end":53},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safety_comment!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":940,"byte_end":967,"line_start":28,"line_end":28,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! safety_comment {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this item cannot be used as its where bounds are not satisfied for the `Self` type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs:180:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m180\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        fn only_derive_is_allowed_to_implement_this_trait() {}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs:3527:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafety_comment! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// SAFETY:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Per the reference [1]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe_impl!(T: Unaligned => Unaligned for [T]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `unsafe_impl` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this item cannot be used as its where bounds are not satisfied for the `Self` type","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":8183,"byte_end":8234,"line_start":180,"line_end":180,"column_start":9,"column_end":60,"is_primary":true,"text":[{"text":"        fn only_derive_is_allowed_to_implement_this_trait() {}","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":5565,"byte_end":5661,"line_start":131,"line_end":131,"column_start":13,"column_end":109,"is_primary":false,"text":[{"text":"            unsafe_impl!(@method $trait $(; |$candidate: $(&$ref_repr)? $(Ptr<$ptr_repr>)?| $is_bit_valid)?);","highlight_start":13,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":4860,"byte_end":5091,"line_start":115,"line_end":120,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        unsafe_impl!(","highlight_start":9,"highlight_end":22},{"text":"            @inner","highlight_start":1,"highlight_end":19},{"text":"            $(#[$attr])*","highlight_start":1,"highlight_end":25},{"text":"            $($tyvar $(: $(? $optbound +)* + $($bound +)*)?,)*","highlight_start":1,"highlight_end":63},{"text":"            => $trait for $ty $(; |$candidate $(: &$ref_repr)? $(: Ptr<$ptr_repr>)?| $is_bit_valid)?","highlight_start":1,"highlight_end":101},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":1158,"byte_end":1170,"line_start":31,"line_end":31,"column_start":40,"column_end":52,"is_primary":false,"text":[{"text":"        const _: () = { $($(#[$attr])* $macro!$args;)* };","highlight_start":40,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs","byte_start":145423,"byte_end":149092,"line_start":3527,"line_end":3595,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safety_comment! {","highlight_start":1,"highlight_end":18},{"text":"    /// SAFETY:","highlight_start":1,"highlight_end":16},{"text":"    /// Per the reference [1]:","highlight_start":1,"highlight_end":31},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   An array of `[T; N]` has a size of `size_of::<T>() * N` and the same","highlight_start":1,"highlight_end":79},{"text":"    ///   alignment of `T`. Arrays are laid out so that the zero-based `nth`","highlight_start":1,"highlight_end":77},{"text":"    ///   element of the array is offset from the start of the array by `n *","highlight_start":1,"highlight_end":77},{"text":"    ///   size_of::<T>()` bytes.","highlight_start":1,"highlight_end":33},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   ...","highlight_start":1,"highlight_end":14},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   Slices have the same layout as the section of the array they slice.","highlight_start":1,"highlight_end":78},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// In other words, the layout of a `[T]` or `[T; N]` is a sequence of `T`s","highlight_start":1,"highlight_end":80},{"text":"    /// laid out back-to-back with no bytes in between. Therefore, `[T]` or `[T;","highlight_start":1,"highlight_end":81},{"text":"    /// N]` are `TryFromBytes`, `FromZeroes`, `FromBytes`, and `AsBytes` if `T`","highlight_start":1,"highlight_end":80},{"text":"    /// is (respectively). Furthermore, since an array/slice has \"the same","highlight_start":1,"highlight_end":75},{"text":"    /// alignment of `T`\", `[T]` and `[T; N]` are `Unaligned` if `T` is.","highlight_start":1,"highlight_end":73},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Note that we don't `assert_unaligned!` for slice types because","highlight_start":1,"highlight_end":71},{"text":"    /// `assert_unaligned!` uses `align_of`, which only works for `Sized` types.","highlight_start":1,"highlight_end":81},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [1] https://doc.rust-lang.org/reference/type-layout.html#array-layout","highlight_start":1,"highlight_end":78},{"text":"    unsafe_impl!(const N: usize, T: FromZeroes => FromZeroes for [T; N]);","highlight_start":1,"highlight_end":74},{"text":"    unsafe_impl!(const N: usize, T: FromBytes => FromBytes for [T; N]);","highlight_start":1,"highlight_end":72},{"text":"    unsafe_impl!(const N: usize, T: AsBytes => AsBytes for [T; N]);","highlight_start":1,"highlight_end":68},{"text":"    unsafe_impl!(const N: usize, T: Unaligned => Unaligned for [T; N]);","highlight_start":1,"highlight_end":72},{"text":"    assert_unaligned!([(); 0], [(); 1], [u8; 0], [u8; 1]);","highlight_start":1,"highlight_end":59},{"text":"    unsafe_impl!(T: TryFromBytes => TryFromBytes for [T]; |c: Ptr<[T]>| {","highlight_start":1,"highlight_end":74},{"text":"        // SAFETY: Assuming the preconditions of `is_bit_valid` are satisfied,","highlight_start":1,"highlight_end":79},{"text":"        // so too will the postcondition: that, if `is_bit_valid(candidate)`","highlight_start":1,"highlight_end":77},{"text":"        // returns true, `*candidate` contains a valid `Self`. Per the reference","highlight_start":1,"highlight_end":81},{"text":"        // [1]:","highlight_start":1,"highlight_end":16},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   An array of `[T; N]` has a size of `size_of::<T>() * N` and the","highlight_start":1,"highlight_end":77},{"text":"        //   same alignment of `T`. Arrays are laid out so that the zero-based","highlight_start":1,"highlight_end":79},{"text":"        //   `nth` element of the array is offset from the start of the array by","highlight_start":1,"highlight_end":81},{"text":"        //   `n * size_of::<T>()` bytes.","highlight_start":1,"highlight_end":41},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   ...","highlight_start":1,"highlight_end":17},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   Slices have the same layout as the section of the array they slice.","highlight_start":1,"highlight_end":81},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // In other words, the layout of a `[T] is a sequence of `T`s laid out","highlight_start":1,"highlight_end":79},{"text":"        // back-to-back with no bytes in between. If all elements in `candidate`","highlight_start":1,"highlight_end":81},{"text":"        // are `is_bit_valid`, so too is `candidate`.","highlight_start":1,"highlight_end":54},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Note that any of the below calls may panic, but it would still be","highlight_start":1,"highlight_end":77},{"text":"        // sound even if it did. `is_bit_valid` does not promise that it will","highlight_start":1,"highlight_end":78},{"text":"        // not panic (in fact, it explicitly warns that it's a possibility), and","highlight_start":1,"highlight_end":81},{"text":"        // we have not violated any safety invariants that we must fix before","highlight_start":1,"highlight_end":78},{"text":"        // returning.","highlight_start":1,"highlight_end":22},{"text":"        c.iter().all(|elem|","highlight_start":1,"highlight_end":28},{"text":"            // SAFETY: We uphold the safety contract of `is_bit_valid(elem)`, by","highlight_start":1,"highlight_end":81},{"text":"            // precondition on the surrounding call to `is_bit_valid`. The","highlight_start":1,"highlight_end":75},{"text":"            // memory referenced by `elem` is contained entirely within `c`, and","highlight_start":1,"highlight_end":81},{"text":"            // satisfies the preconditions satisfied by `c`. By axiom, we assume","highlight_start":1,"highlight_end":81},{"text":"            // that `Iterator:all` does not invalidate these preconditions","highlight_start":1,"highlight_end":75},{"text":"            // (e.g., by writing to `elem`.) Since `elem` is derived from `c`,","highlight_start":1,"highlight_end":79},{"text":"            // it is only possible for uninitialized bytes to occur in `elem` at","highlight_start":1,"highlight_end":81},{"text":"            // the same bytes they occur within `c`.","highlight_start":1,"highlight_end":53},{"text":"            unsafe { <T as TryFromBytes>::is_bit_valid(elem) }","highlight_start":1,"highlight_end":63},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    unsafe_impl!(T: FromZeroes => FromZeroes for [T]);","highlight_start":1,"highlight_end":55},{"text":"    unsafe_impl!(T: FromBytes => FromBytes for [T]);","highlight_start":1,"highlight_end":53},{"text":"    unsafe_impl!(T: AsBytes => AsBytes for [T]);","highlight_start":1,"highlight_end":49},{"text":"    unsafe_impl!(T: Unaligned => Unaligned for [T]);","highlight_start":1,"highlight_end":53},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safety_comment!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":940,"byte_end":967,"line_start":28,"line_end":28,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! safety_comment {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this item cannot be used as its where bounds are not satisfied for the `Self` type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs:180:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m180\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        fn only_derive_is_allowed_to_implement_this_trait() {}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs:3527:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafety_comment! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// SAFETY:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Per the reference [1]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe_impl!(T: Unaligned => Unaligned for [T]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `unsafe_impl` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this item cannot be used as its where bounds are not satisfied for the `Self` type","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":8183,"byte_end":8234,"line_start":180,"line_end":180,"column_start":9,"column_end":60,"is_primary":true,"text":[{"text":"        fn only_derive_is_allowed_to_implement_this_trait() {}","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":5565,"byte_end":5661,"line_start":131,"line_end":131,"column_start":13,"column_end":109,"is_primary":false,"text":[{"text":"            unsafe_impl!(@method $trait $(; |$candidate: $(&$ref_repr)? $(Ptr<$ptr_repr>)?| $is_bit_valid)?);","highlight_start":13,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":4860,"byte_end":5091,"line_start":115,"line_end":120,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        unsafe_impl!(","highlight_start":9,"highlight_end":22},{"text":"            @inner","highlight_start":1,"highlight_end":19},{"text":"            $(#[$attr])*","highlight_start":1,"highlight_end":25},{"text":"            $($tyvar $(: $(? $optbound +)* + $($bound +)*)?,)*","highlight_start":1,"highlight_end":63},{"text":"            => $trait for $ty $(; |$candidate $(: &$ref_repr)? $(: Ptr<$ptr_repr>)?| $is_bit_valid)?","highlight_start":1,"highlight_end":101},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":1158,"byte_end":1170,"line_start":31,"line_end":31,"column_start":40,"column_end":52,"is_primary":false,"text":[{"text":"        const _: () = { $($(#[$attr])* $macro!$args;)* };","highlight_start":40,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs","byte_start":145423,"byte_end":149092,"line_start":3527,"line_end":3595,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safety_comment! {","highlight_start":1,"highlight_end":18},{"text":"    /// SAFETY:","highlight_start":1,"highlight_end":16},{"text":"    /// Per the reference [1]:","highlight_start":1,"highlight_end":31},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   An array of `[T; N]` has a size of `size_of::<T>() * N` and the same","highlight_start":1,"highlight_end":79},{"text":"    ///   alignment of `T`. Arrays are laid out so that the zero-based `nth`","highlight_start":1,"highlight_end":77},{"text":"    ///   element of the array is offset from the start of the array by `n *","highlight_start":1,"highlight_end":77},{"text":"    ///   size_of::<T>()` bytes.","highlight_start":1,"highlight_end":33},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   ...","highlight_start":1,"highlight_end":14},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    ///   Slices have the same layout as the section of the array they slice.","highlight_start":1,"highlight_end":78},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// In other words, the layout of a `[T]` or `[T; N]` is a sequence of `T`s","highlight_start":1,"highlight_end":80},{"text":"    /// laid out back-to-back with no bytes in between. Therefore, `[T]` or `[T;","highlight_start":1,"highlight_end":81},{"text":"    /// N]` are `TryFromBytes`, `FromZeroes`, `FromBytes`, and `AsBytes` if `T`","highlight_start":1,"highlight_end":80},{"text":"    /// is (respectively). Furthermore, since an array/slice has \"the same","highlight_start":1,"highlight_end":75},{"text":"    /// alignment of `T`\", `[T]` and `[T; N]` are `Unaligned` if `T` is.","highlight_start":1,"highlight_end":73},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Note that we don't `assert_unaligned!` for slice types because","highlight_start":1,"highlight_end":71},{"text":"    /// `assert_unaligned!` uses `align_of`, which only works for `Sized` types.","highlight_start":1,"highlight_end":81},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [1] https://doc.rust-lang.org/reference/type-layout.html#array-layout","highlight_start":1,"highlight_end":78},{"text":"    unsafe_impl!(const N: usize, T: FromZeroes => FromZeroes for [T; N]);","highlight_start":1,"highlight_end":74},{"text":"    unsafe_impl!(const N: usize, T: FromBytes => FromBytes for [T; N]);","highlight_start":1,"highlight_end":72},{"text":"    unsafe_impl!(const N: usize, T: AsBytes => AsBytes for [T; N]);","highlight_start":1,"highlight_end":68},{"text":"    unsafe_impl!(const N: usize, T: Unaligned => Unaligned for [T; N]);","highlight_start":1,"highlight_end":72},{"text":"    assert_unaligned!([(); 0], [(); 1], [u8; 0], [u8; 1]);","highlight_start":1,"highlight_end":59},{"text":"    unsafe_impl!(T: TryFromBytes => TryFromBytes for [T]; |c: Ptr<[T]>| {","highlight_start":1,"highlight_end":74},{"text":"        // SAFETY: Assuming the preconditions of `is_bit_valid` are satisfied,","highlight_start":1,"highlight_end":79},{"text":"        // so too will the postcondition: that, if `is_bit_valid(candidate)`","highlight_start":1,"highlight_end":77},{"text":"        // returns true, `*candidate` contains a valid `Self`. Per the reference","highlight_start":1,"highlight_end":81},{"text":"        // [1]:","highlight_start":1,"highlight_end":16},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   An array of `[T; N]` has a size of `size_of::<T>() * N` and the","highlight_start":1,"highlight_end":77},{"text":"        //   same alignment of `T`. Arrays are laid out so that the zero-based","highlight_start":1,"highlight_end":79},{"text":"        //   `nth` element of the array is offset from the start of the array by","highlight_start":1,"highlight_end":81},{"text":"        //   `n * size_of::<T>()` bytes.","highlight_start":1,"highlight_end":41},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   ...","highlight_start":1,"highlight_end":17},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        //   Slices have the same layout as the section of the array they slice.","highlight_start":1,"highlight_end":81},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // In other words, the layout of a `[T] is a sequence of `T`s laid out","highlight_start":1,"highlight_end":79},{"text":"        // back-to-back with no bytes in between. If all elements in `candidate`","highlight_start":1,"highlight_end":81},{"text":"        // are `is_bit_valid`, so too is `candidate`.","highlight_start":1,"highlight_end":54},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Note that any of the below calls may panic, but it would still be","highlight_start":1,"highlight_end":77},{"text":"        // sound even if it did. `is_bit_valid` does not promise that it will","highlight_start":1,"highlight_end":78},{"text":"        // not panic (in fact, it explicitly warns that it's a possibility), and","highlight_start":1,"highlight_end":81},{"text":"        // we have not violated any safety invariants that we must fix before","highlight_start":1,"highlight_end":78},{"text":"        // returning.","highlight_start":1,"highlight_end":22},{"text":"        c.iter().all(|elem|","highlight_start":1,"highlight_end":28},{"text":"            // SAFETY: We uphold the safety contract of `is_bit_valid(elem)`, by","highlight_start":1,"highlight_end":81},{"text":"            // precondition on the surrounding call to `is_bit_valid`. The","highlight_start":1,"highlight_end":75},{"text":"            // memory referenced by `elem` is contained entirely within `c`, and","highlight_start":1,"highlight_end":81},{"text":"            // satisfies the preconditions satisfied by `c`. By axiom, we assume","highlight_start":1,"highlight_end":81},{"text":"            // that `Iterator:all` does not invalidate these preconditions","highlight_start":1,"highlight_end":75},{"text":"            // (e.g., by writing to `elem`.) Since `elem` is derived from `c`,","highlight_start":1,"highlight_end":79},{"text":"            // it is only possible for uninitialized bytes to occur in `elem` at","highlight_start":1,"highlight_end":81},{"text":"            // the same bytes they occur within `c`.","highlight_start":1,"highlight_end":53},{"text":"            unsafe { <T as TryFromBytes>::is_bit_valid(elem) }","highlight_start":1,"highlight_end":63},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    unsafe_impl!(T: FromZeroes => FromZeroes for [T]);","highlight_start":1,"highlight_end":55},{"text":"    unsafe_impl!(T: FromBytes => FromBytes for [T]);","highlight_start":1,"highlight_end":53},{"text":"    unsafe_impl!(T: AsBytes => AsBytes for [T]);","highlight_start":1,"highlight_end":49},{"text":"    unsafe_impl!(T: Unaligned => Unaligned for [T]);","highlight_start":1,"highlight_end":53},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safety_comment!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":940,"byte_end":967,"line_start":28,"line_end":28,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! safety_comment {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"unsafe_impl!","def_site_span":{"file_name":"C:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs","byte_start":2430,"byte_end":2454,"line_start":59,"line_end":59,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! unsafe_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this item cannot be used as its where bounds are not satisfied for the `Self` type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\macros.rs:180:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m180\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        fn only_derive_is_allowed_to_implement_this_trait() {}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Nockseh\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs:3527:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafety_comment! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// SAFETY:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Per the reference [1]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe_impl!(T: Unaligned => Unaligned for [T]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `unsafe_impl` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"9 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 9 warnings emitted\u001b[0m\n\n"}
