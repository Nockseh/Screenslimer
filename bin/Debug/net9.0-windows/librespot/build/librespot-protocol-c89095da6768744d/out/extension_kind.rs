// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `extension_kind.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:spotify.extendedmetadata.ExtensionKind)
pub enum ExtensionKind {
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.UNKNOWN_EXTENSION)
    UNKNOWN_EXTENSION = 0,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.CANVAZ)
    CANVAZ = 1,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.STORYLINES)
    STORYLINES = 2,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_TOPICS)
    PODCAST_TOPICS = 3,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_SEGMENTS)
    PODCAST_SEGMENTS = 4,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.AUDIO_FILES)
    AUDIO_FILES = 5,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.TRACK_DESCRIPTOR)
    TRACK_DESCRIPTOR = 6,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.ARTIST_V4)
    ARTIST_V4 = 8,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.ALBUM_V4)
    ALBUM_V4 = 9,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.TRACK_V4)
    TRACK_V4 = 10,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.SHOW_V4)
    SHOW_V4 = 11,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.EPISODE_V4)
    EPISODE_V4 = 12,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_HTML_DESCRIPTION)
    PODCAST_HTML_DESCRIPTION = 13,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_QUOTES)
    PODCAST_QUOTES = 14,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.USER_PROFILE)
    USER_PROFILE = 15,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.CANVAS_V1)
    CANVAS_V1 = 16,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.SHOW_V4_BASE)
    SHOW_V4_BASE = 17,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.SHOW_V4_EPISODES_ASSOC)
    SHOW_V4_EPISODES_ASSOC = 18,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.TRACK_DESCRIPTOR_SIGNATURES)
    TRACK_DESCRIPTOR_SIGNATURES = 19,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_AD_SEGMENTS)
    PODCAST_AD_SEGMENTS = 20,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.EPISODE_TRANSCRIPTS)
    EPISODE_TRANSCRIPTS = 21,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_SUBSCRIPTIONS)
    PODCAST_SUBSCRIPTIONS = 22,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.EXTRACTED_COLOR)
    EXTRACTED_COLOR = 23,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_VIRALITY)
    PODCAST_VIRALITY = 24,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.IMAGE_SPARKLES_HACK)
    IMAGE_SPARKLES_HACK = 25,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_POPULARITY_HACK)
    PODCAST_POPULARITY_HACK = 26,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.AUTOMIX_MODE)
    AUTOMIX_MODE = 27,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.CUEPOINTS)
    CUEPOINTS = 28,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_POLL)
    PODCAST_POLL = 29,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.EPISODE_ACCESS)
    EPISODE_ACCESS = 30,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.SHOW_ACCESS)
    SHOW_ACCESS = 31,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_QNA)
    PODCAST_QNA = 32,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.CLIPS)
    CLIPS = 33,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_CTA_CARDS)
    PODCAST_CTA_CARDS = 36,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.PODCAST_RATING)
    PODCAST_RATING = 37,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.DISPLAY_SEGMENTS)
    DISPLAY_SEGMENTS = 38,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.GREENROOM)
    GREENROOM = 39,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.USER_CREATED)
    USER_CREATED = 40,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.CLIENT_CONFIG)
    CLIENT_CONFIG = 48,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionKind.AUDIOBOOK_SPECIFICS)
    AUDIOBOOK_SPECIFICS = 52,
}

impl ::protobuf::Enum for ExtensionKind {
    const NAME: &'static str = "ExtensionKind";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ExtensionKind> {
        match value {
            0 => ::std::option::Option::Some(ExtensionKind::UNKNOWN_EXTENSION),
            1 => ::std::option::Option::Some(ExtensionKind::CANVAZ),
            2 => ::std::option::Option::Some(ExtensionKind::STORYLINES),
            3 => ::std::option::Option::Some(ExtensionKind::PODCAST_TOPICS),
            4 => ::std::option::Option::Some(ExtensionKind::PODCAST_SEGMENTS),
            5 => ::std::option::Option::Some(ExtensionKind::AUDIO_FILES),
            6 => ::std::option::Option::Some(ExtensionKind::TRACK_DESCRIPTOR),
            8 => ::std::option::Option::Some(ExtensionKind::ARTIST_V4),
            9 => ::std::option::Option::Some(ExtensionKind::ALBUM_V4),
            10 => ::std::option::Option::Some(ExtensionKind::TRACK_V4),
            11 => ::std::option::Option::Some(ExtensionKind::SHOW_V4),
            12 => ::std::option::Option::Some(ExtensionKind::EPISODE_V4),
            13 => ::std::option::Option::Some(ExtensionKind::PODCAST_HTML_DESCRIPTION),
            14 => ::std::option::Option::Some(ExtensionKind::PODCAST_QUOTES),
            15 => ::std::option::Option::Some(ExtensionKind::USER_PROFILE),
            16 => ::std::option::Option::Some(ExtensionKind::CANVAS_V1),
            17 => ::std::option::Option::Some(ExtensionKind::SHOW_V4_BASE),
            18 => ::std::option::Option::Some(ExtensionKind::SHOW_V4_EPISODES_ASSOC),
            19 => ::std::option::Option::Some(ExtensionKind::TRACK_DESCRIPTOR_SIGNATURES),
            20 => ::std::option::Option::Some(ExtensionKind::PODCAST_AD_SEGMENTS),
            21 => ::std::option::Option::Some(ExtensionKind::EPISODE_TRANSCRIPTS),
            22 => ::std::option::Option::Some(ExtensionKind::PODCAST_SUBSCRIPTIONS),
            23 => ::std::option::Option::Some(ExtensionKind::EXTRACTED_COLOR),
            24 => ::std::option::Option::Some(ExtensionKind::PODCAST_VIRALITY),
            25 => ::std::option::Option::Some(ExtensionKind::IMAGE_SPARKLES_HACK),
            26 => ::std::option::Option::Some(ExtensionKind::PODCAST_POPULARITY_HACK),
            27 => ::std::option::Option::Some(ExtensionKind::AUTOMIX_MODE),
            28 => ::std::option::Option::Some(ExtensionKind::CUEPOINTS),
            29 => ::std::option::Option::Some(ExtensionKind::PODCAST_POLL),
            30 => ::std::option::Option::Some(ExtensionKind::EPISODE_ACCESS),
            31 => ::std::option::Option::Some(ExtensionKind::SHOW_ACCESS),
            32 => ::std::option::Option::Some(ExtensionKind::PODCAST_QNA),
            33 => ::std::option::Option::Some(ExtensionKind::CLIPS),
            36 => ::std::option::Option::Some(ExtensionKind::PODCAST_CTA_CARDS),
            37 => ::std::option::Option::Some(ExtensionKind::PODCAST_RATING),
            38 => ::std::option::Option::Some(ExtensionKind::DISPLAY_SEGMENTS),
            39 => ::std::option::Option::Some(ExtensionKind::GREENROOM),
            40 => ::std::option::Option::Some(ExtensionKind::USER_CREATED),
            48 => ::std::option::Option::Some(ExtensionKind::CLIENT_CONFIG),
            52 => ::std::option::Option::Some(ExtensionKind::AUDIOBOOK_SPECIFICS),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ExtensionKind> {
        match str {
            "UNKNOWN_EXTENSION" => ::std::option::Option::Some(ExtensionKind::UNKNOWN_EXTENSION),
            "CANVAZ" => ::std::option::Option::Some(ExtensionKind::CANVAZ),
            "STORYLINES" => ::std::option::Option::Some(ExtensionKind::STORYLINES),
            "PODCAST_TOPICS" => ::std::option::Option::Some(ExtensionKind::PODCAST_TOPICS),
            "PODCAST_SEGMENTS" => ::std::option::Option::Some(ExtensionKind::PODCAST_SEGMENTS),
            "AUDIO_FILES" => ::std::option::Option::Some(ExtensionKind::AUDIO_FILES),
            "TRACK_DESCRIPTOR" => ::std::option::Option::Some(ExtensionKind::TRACK_DESCRIPTOR),
            "ARTIST_V4" => ::std::option::Option::Some(ExtensionKind::ARTIST_V4),
            "ALBUM_V4" => ::std::option::Option::Some(ExtensionKind::ALBUM_V4),
            "TRACK_V4" => ::std::option::Option::Some(ExtensionKind::TRACK_V4),
            "SHOW_V4" => ::std::option::Option::Some(ExtensionKind::SHOW_V4),
            "EPISODE_V4" => ::std::option::Option::Some(ExtensionKind::EPISODE_V4),
            "PODCAST_HTML_DESCRIPTION" => ::std::option::Option::Some(ExtensionKind::PODCAST_HTML_DESCRIPTION),
            "PODCAST_QUOTES" => ::std::option::Option::Some(ExtensionKind::PODCAST_QUOTES),
            "USER_PROFILE" => ::std::option::Option::Some(ExtensionKind::USER_PROFILE),
            "CANVAS_V1" => ::std::option::Option::Some(ExtensionKind::CANVAS_V1),
            "SHOW_V4_BASE" => ::std::option::Option::Some(ExtensionKind::SHOW_V4_BASE),
            "SHOW_V4_EPISODES_ASSOC" => ::std::option::Option::Some(ExtensionKind::SHOW_V4_EPISODES_ASSOC),
            "TRACK_DESCRIPTOR_SIGNATURES" => ::std::option::Option::Some(ExtensionKind::TRACK_DESCRIPTOR_SIGNATURES),
            "PODCAST_AD_SEGMENTS" => ::std::option::Option::Some(ExtensionKind::PODCAST_AD_SEGMENTS),
            "EPISODE_TRANSCRIPTS" => ::std::option::Option::Some(ExtensionKind::EPISODE_TRANSCRIPTS),
            "PODCAST_SUBSCRIPTIONS" => ::std::option::Option::Some(ExtensionKind::PODCAST_SUBSCRIPTIONS),
            "EXTRACTED_COLOR" => ::std::option::Option::Some(ExtensionKind::EXTRACTED_COLOR),
            "PODCAST_VIRALITY" => ::std::option::Option::Some(ExtensionKind::PODCAST_VIRALITY),
            "IMAGE_SPARKLES_HACK" => ::std::option::Option::Some(ExtensionKind::IMAGE_SPARKLES_HACK),
            "PODCAST_POPULARITY_HACK" => ::std::option::Option::Some(ExtensionKind::PODCAST_POPULARITY_HACK),
            "AUTOMIX_MODE" => ::std::option::Option::Some(ExtensionKind::AUTOMIX_MODE),
            "CUEPOINTS" => ::std::option::Option::Some(ExtensionKind::CUEPOINTS),
            "PODCAST_POLL" => ::std::option::Option::Some(ExtensionKind::PODCAST_POLL),
            "EPISODE_ACCESS" => ::std::option::Option::Some(ExtensionKind::EPISODE_ACCESS),
            "SHOW_ACCESS" => ::std::option::Option::Some(ExtensionKind::SHOW_ACCESS),
            "PODCAST_QNA" => ::std::option::Option::Some(ExtensionKind::PODCAST_QNA),
            "CLIPS" => ::std::option::Option::Some(ExtensionKind::CLIPS),
            "PODCAST_CTA_CARDS" => ::std::option::Option::Some(ExtensionKind::PODCAST_CTA_CARDS),
            "PODCAST_RATING" => ::std::option::Option::Some(ExtensionKind::PODCAST_RATING),
            "DISPLAY_SEGMENTS" => ::std::option::Option::Some(ExtensionKind::DISPLAY_SEGMENTS),
            "GREENROOM" => ::std::option::Option::Some(ExtensionKind::GREENROOM),
            "USER_CREATED" => ::std::option::Option::Some(ExtensionKind::USER_CREATED),
            "CLIENT_CONFIG" => ::std::option::Option::Some(ExtensionKind::CLIENT_CONFIG),
            "AUDIOBOOK_SPECIFICS" => ::std::option::Option::Some(ExtensionKind::AUDIOBOOK_SPECIFICS),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ExtensionKind] = &[
        ExtensionKind::UNKNOWN_EXTENSION,
        ExtensionKind::CANVAZ,
        ExtensionKind::STORYLINES,
        ExtensionKind::PODCAST_TOPICS,
        ExtensionKind::PODCAST_SEGMENTS,
        ExtensionKind::AUDIO_FILES,
        ExtensionKind::TRACK_DESCRIPTOR,
        ExtensionKind::ARTIST_V4,
        ExtensionKind::ALBUM_V4,
        ExtensionKind::TRACK_V4,
        ExtensionKind::SHOW_V4,
        ExtensionKind::EPISODE_V4,
        ExtensionKind::PODCAST_HTML_DESCRIPTION,
        ExtensionKind::PODCAST_QUOTES,
        ExtensionKind::USER_PROFILE,
        ExtensionKind::CANVAS_V1,
        ExtensionKind::SHOW_V4_BASE,
        ExtensionKind::SHOW_V4_EPISODES_ASSOC,
        ExtensionKind::TRACK_DESCRIPTOR_SIGNATURES,
        ExtensionKind::PODCAST_AD_SEGMENTS,
        ExtensionKind::EPISODE_TRANSCRIPTS,
        ExtensionKind::PODCAST_SUBSCRIPTIONS,
        ExtensionKind::EXTRACTED_COLOR,
        ExtensionKind::PODCAST_VIRALITY,
        ExtensionKind::IMAGE_SPARKLES_HACK,
        ExtensionKind::PODCAST_POPULARITY_HACK,
        ExtensionKind::AUTOMIX_MODE,
        ExtensionKind::CUEPOINTS,
        ExtensionKind::PODCAST_POLL,
        ExtensionKind::EPISODE_ACCESS,
        ExtensionKind::SHOW_ACCESS,
        ExtensionKind::PODCAST_QNA,
        ExtensionKind::CLIPS,
        ExtensionKind::PODCAST_CTA_CARDS,
        ExtensionKind::PODCAST_RATING,
        ExtensionKind::DISPLAY_SEGMENTS,
        ExtensionKind::GREENROOM,
        ExtensionKind::USER_CREATED,
        ExtensionKind::CLIENT_CONFIG,
        ExtensionKind::AUDIOBOOK_SPECIFICS,
    ];
}

impl ::protobuf::EnumFull for ExtensionKind {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ExtensionKind").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ExtensionKind::UNKNOWN_EXTENSION => 0,
            ExtensionKind::CANVAZ => 1,
            ExtensionKind::STORYLINES => 2,
            ExtensionKind::PODCAST_TOPICS => 3,
            ExtensionKind::PODCAST_SEGMENTS => 4,
            ExtensionKind::AUDIO_FILES => 5,
            ExtensionKind::TRACK_DESCRIPTOR => 6,
            ExtensionKind::ARTIST_V4 => 7,
            ExtensionKind::ALBUM_V4 => 8,
            ExtensionKind::TRACK_V4 => 9,
            ExtensionKind::SHOW_V4 => 10,
            ExtensionKind::EPISODE_V4 => 11,
            ExtensionKind::PODCAST_HTML_DESCRIPTION => 12,
            ExtensionKind::PODCAST_QUOTES => 13,
            ExtensionKind::USER_PROFILE => 14,
            ExtensionKind::CANVAS_V1 => 15,
            ExtensionKind::SHOW_V4_BASE => 16,
            ExtensionKind::SHOW_V4_EPISODES_ASSOC => 17,
            ExtensionKind::TRACK_DESCRIPTOR_SIGNATURES => 18,
            ExtensionKind::PODCAST_AD_SEGMENTS => 19,
            ExtensionKind::EPISODE_TRANSCRIPTS => 20,
            ExtensionKind::PODCAST_SUBSCRIPTIONS => 21,
            ExtensionKind::EXTRACTED_COLOR => 22,
            ExtensionKind::PODCAST_VIRALITY => 23,
            ExtensionKind::IMAGE_SPARKLES_HACK => 24,
            ExtensionKind::PODCAST_POPULARITY_HACK => 25,
            ExtensionKind::AUTOMIX_MODE => 26,
            ExtensionKind::CUEPOINTS => 27,
            ExtensionKind::PODCAST_POLL => 28,
            ExtensionKind::EPISODE_ACCESS => 29,
            ExtensionKind::SHOW_ACCESS => 30,
            ExtensionKind::PODCAST_QNA => 31,
            ExtensionKind::CLIPS => 32,
            ExtensionKind::PODCAST_CTA_CARDS => 33,
            ExtensionKind::PODCAST_RATING => 34,
            ExtensionKind::DISPLAY_SEGMENTS => 35,
            ExtensionKind::GREENROOM => 36,
            ExtensionKind::USER_CREATED => 37,
            ExtensionKind::CLIENT_CONFIG => 38,
            ExtensionKind::AUDIOBOOK_SPECIFICS => 39,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ExtensionKind {
    fn default() -> Self {
        ExtensionKind::UNKNOWN_EXTENSION
    }
}

impl ExtensionKind {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ExtensionKind>("ExtensionKind")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14extension_kind.proto\x12\x18spotify.extendedmetadata*\xad\x06\n\rE\
    xtensionKind\x12\x15\n\x11UNKNOWN_EXTENSION\x10\0\x12\n\n\x06CANVAZ\x10\
    \x01\x12\x0e\n\nSTORYLINES\x10\x02\x12\x12\n\x0ePODCAST_TOPICS\x10\x03\
    \x12\x14\n\x10PODCAST_SEGMENTS\x10\x04\x12\x0f\n\x0bAUDIO_FILES\x10\x05\
    \x12\x14\n\x10TRACK_DESCRIPTOR\x10\x06\x12\r\n\tARTIST_V4\x10\x08\x12\
    \x0c\n\x08ALBUM_V4\x10\t\x12\x0c\n\x08TRACK_V4\x10\n\x12\x0b\n\x07SHOW_V\
    4\x10\x0b\x12\x0e\n\nEPISODE_V4\x10\x0c\x12\x1c\n\x18PODCAST_HTML_DESCRI\
    PTION\x10\r\x12\x12\n\x0ePODCAST_QUOTES\x10\x0e\x12\x10\n\x0cUSER_PROFIL\
    E\x10\x0f\x12\r\n\tCANVAS_V1\x10\x10\x12\x10\n\x0cSHOW_V4_BASE\x10\x11\
    \x12\x1a\n\x16SHOW_V4_EPISODES_ASSOC\x10\x12\x12\x1f\n\x1bTRACK_DESCRIPT\
    OR_SIGNATURES\x10\x13\x12\x17\n\x13PODCAST_AD_SEGMENTS\x10\x14\x12\x17\n\
    \x13EPISODE_TRANSCRIPTS\x10\x15\x12\x19\n\x15PODCAST_SUBSCRIPTIONS\x10\
    \x16\x12\x13\n\x0fEXTRACTED_COLOR\x10\x17\x12\x14\n\x10PODCAST_VIRALITY\
    \x10\x18\x12\x17\n\x13IMAGE_SPARKLES_HACK\x10\x19\x12\x1b\n\x17PODCAST_P\
    OPULARITY_HACK\x10\x1a\x12\x10\n\x0cAUTOMIX_MODE\x10\x1b\x12\r\n\tCUEPOI\
    NTS\x10\x1c\x12\x10\n\x0cPODCAST_POLL\x10\x1d\x12\x12\n\x0eEPISODE_ACCES\
    S\x10\x1e\x12\x0f\n\x0bSHOW_ACCESS\x10\x1f\x12\x0f\n\x0bPODCAST_QNA\x10\
    \x20\x12\t\n\x05CLIPS\x10!\x12\x15\n\x11PODCAST_CTA_CARDS\x10$\x12\x12\n\
    \x0ePODCAST_RATING\x10%\x12\x14\n\x10DISPLAY_SEGMENTS\x10&\x12\r\n\tGREE\
    NROOM\x10'\x12\x10\n\x0cUSER_CREATED\x10(\x12\x11\n\rCLIENT_CONFIG\x100\
    \x12\x17\n\x13AUDIOBOOK_SPECIFICS\x104BA\n\"com.spotify.extendedmetadata\
    .protoP\x01H\x02\xf8\x01\x01\xa2\x02\x13SPTExtendedMetadatab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ExtensionKind::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
